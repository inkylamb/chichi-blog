(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{557:function(e,t,n){"use strict";n.r(t);var a=n(4),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"react-测试环境搭建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-测试环境搭建"}},[e._v("#")]),e._v(" react 测试环境搭建")]),e._v(" "),n("h2",{attrs:{id:"开篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开篇"}},[e._v("#")]),e._v(" 开篇")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" 最近梳理组件代码，在主要工作就是学习,改bug以及测试。主要使用的工具链是jest + enzyme，这套的有点是能够使用类似jquery的方式进行测试在某种程度上是非常舒服的，还有一种方案使用react-creat-app 自带的测试react-testing-Library测试。两者各有优劣，所以可以更具自己的需求进行选择，最后总结的时候进行我认为的两者的选择。\n")])])]),n("h3",{attrs:{id:"测试集成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试集成"}},[e._v("#")]),e._v(" 测试集成")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("这里面主要介绍怎么在react项目中集成测试，目的也很简单比如有些项目需要使用TDD方式开发就可以参考这里。比如一些其他详细介绍可以参考下面文章。\n")])])]),n("p",[e._v("这边的测试我一律使用来演示，更加方便清晰。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("npx create-react-app my-app\ncd my-app\nnpm start\n")])])]),n("h3",{attrs:{id:"jest-enzyme"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jest-enzyme"}},[e._v("#")]),e._v(" jest + enzyme")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("项目搭建好了之后添加在package 下面引用如下依赖包，或者直接复制package.json然后运行yarn or npm i")]),e._v(" "),n("p",[e._v('{\n"name": "my-app",\n"version": "0.1.0",\n"private": true,\n"dependencies": {\n"@testing-library/jest-dom": "^4.2.4",\n"@testing-library/react": "^9.3.2",\n"@testing-library/user-event": "^7.1.2",\n"react": "^16.12.0",\n"react-dom": "^16.12.0",\n"react-scripts": "3.3.1"\n},\n"scripts": {\n"start": "react-scripts start",\n"build": "react-scripts build",\n"test": "jest --colors --coverage",\n"eject": "react-scripts eject"\n},\n"devDependencies": {\n"@babel/core": "'),n("em",[e._v('",\n"@babel/plugin-proposal-class-properties": "')]),e._v('",\n"@babel/preset-env": "'),n("em",[e._v('",\n"@babel/preset-react": "')]),e._v('",\n"babel-jest": "'),n("em",[e._v('",\n"enzyme": "')]),e._v('",\n"enzyme-adapter-react-16": "'),n("em",[e._v('",\n"jest": "')]),e._v('"\n},\n"eslintConfig": {\n"extends": "react-app"\n},\n"browserslist": {\n"production": [\n">0.2%",\n"not dead",\n"not op_mini all"\n],\n"development": [\n"last 1 chrome version",\n"last 1 firefox version",\n"last 1 safari version"\n]\n},\n"jest": {\n"moduleFileExtensions": [\n"js",\n"jsx"\n],\n"moduleDirectories": [\n"node_modules"\n],\n"moduleNameMapper": {\n"\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "'),n("rootDir",[e._v("/"),n("strong",[e._v("jest")]),e._v("/"),n("strong",[e._v("mocks")]),e._v('/fileMock.js",\n"\\.(css|scss)$": "identity-obj-proxy",\n"^cpn(.*)$": "'),n("rootDir",[e._v('/src/components$1"\n}\n}\n}')])],1)],1)]),e._v(" "),n("li",[n("p",[e._v("添加babel配置.babelrc.js")]),e._v(" "),n("p",[e._v("module.exports = {\npresets: ['@babel/preset-env', '@babel/preset-react'],\nplugins: ['@babel/plugin-proposal-class-properties']\n};")])]),e._v(" "),n("li",[n("p",[e._v("由于初始项目使用了testing-library 这里的babel-jest版本会与引入的版本冲突应该后续会修复。我添加了这个文件.env")]),e._v(" "),n("p",[e._v("SKIP_PREFLIGHT_CHECK=true")])])]),e._v(" "),n("ul",[n("li",[e._v("基本上面的配置就可以实现测试了详细的测试使用方法见"),n("a",{attrs:{href:"https://blog.chi-chi.store/views/technology/2020/jest%20Enzyme.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("jest&&enzyme"),n("OutboundLink")],1),e._v(" 下面就随便找个demo 测试下，首先删除自带的测试有俩个带测试的Test文件直接删除")])]),e._v(" "),n("p",[e._v("因为可能会和原测试冲突")]),e._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[n("p",[e._v("index.js修改")]),e._v(" "),n("p",[e._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/Home.jsx'\nimport * as serviceWorker from './serviceWorker';")]),e._v(" "),n("p",[e._v("ReactDOM.render("),n("Home"),e._v(", document.getElementById('root'));")],1),e._v(" "),n("p",[e._v("// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();")])]),e._v(" "),n("li",[n("p",[e._v("创建一个文件夹components 在里面创建两个文件一个"),n("strong",[e._v("tests/Home-test.js 一个Home.jsx")])]),e._v(" "),n("p",[e._v("//**Home.jsx")]),e._v(" "),n("p",[e._v("import React from 'react'")]),e._v(" "),n("p",[e._v("export default class Home extends React.Component {\nstatic defaultProps = {\ntitle: 'jest + enzyme demo',\nvalue: 0\n}")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" constructor(props) {\n     super(props)\n     const { title, value } = props\n     this.state = {\n         title,\n         value\n     }\n }\n\n componentWillReceiveProps(newProps) {\n     const { title, value } = newProps\n     this.setState({ title, value })\n }\n\n render() {\n     const { title, value } = this.state\n     return (\n         <div>\n             <h1>{title}</h1>\n             <div className='show-value'>value = {value}</div>\n             <input value={value} onChange={this.changeHandler} />\n             <button onClick={this.add}>Value++</button>\n         </div>\n     )\n }\n\n add = () => {\n     this.setState({\n         value: parseInt(this.state.value) + 1\n     })\n }\n\n changeHandler = e => {\n     this.setState({\n         value: e.target.value\n     })\n }\n")])])]),n("p",[e._v("}**")]),e._v(" "),n("p",[e._v("//"),n("strong",[e._v("tests/Home-test.js")]),e._v("\nimport React from 'react';\nimport Enzyme, {mount} from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport Home from '../Home';")]),e._v(" "),n("p",[e._v("Enzyme.configure({adapter: new Adapter()});")]),e._v(" "),n("p",[e._v("describe('UI test #home', () => {\nit('shoule have title', () => {\nconst wrapper = mount("),n("Home"),e._v(")\nconst title = wrapper.find('h1')\nexpect(title).toHaveLength(1)\n})")],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" it('should add 1 when click button', () => {\n     const wrapper = mount(<Home />)\n     const showValue = wrapper.find('.show-value')\n     const inputOldValue = parseInt(showValue.text())\n     // 模拟button点击事件\n     wrapper.find('button').simulate('click')\n     const inputCurrentValue = parseInt(showValue.text())\n     expect(inputCurrentValue).toBe(inputOldValue + 1)\n })\n\n it('should change to the input value when input a number', () => {\n     const wrapper = mount(<Home />)\n     const showValue = wrapper.find('.show-value')\n     // 模拟监听input输入框的change事件\n     wrapper.find('input').simulate('change', {\n         target: {\n             value: '5'\n         }\n     })\n     expect(showValue.text()).toBe(\"value = 5\")\n })\n\n it('should change when props change', () => {\n     const wrapper = mount(<Home title=\"aaa\"/>)\n     const title = wrapper.find('h1')\n\n     expect(title.text()).toBe('aaa')\n     \n     wrapper.setProps({\n         title: 'bbb'\n     })\n\n     expect(title.text()).toBe('bbb')\n })\n")])])]),n("p",[e._v("})")])])]),e._v(" "),n("p",[e._v("运行 npm run test")]),e._v(" "),n("p",[e._v("测试结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n Home.jsx |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       4 passed, 4 total\nSnapshots:   0 total\nTime:        3.221s\n")])])]),n("p",[e._v("好了这样就可以测试了")]),e._v(" "),n("h3",{attrs:{id:"reacttesting-library"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reacttesting-library"}},[e._v("#")]),e._v(" ReactTesting  Library")]),e._v(" "),n("p",[e._v("这个目前我使用creat-reat-app 构建它会自动创建。所以理论上可以不用配置了。如果需要引入这个测试工具。最简单加上这个在package.json")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('"dependencies": {\n    "@testing-library/jest-dom": "^4.2.4",\n    "@testing-library/react": "^9.3.2",\n    "@testing-library/user-event": "^7.1.2",\n    "react": "^16.12.0",\n    "react-dom": "^16.12.0",\n    "react-scripts": "3.3.1"\n  }\n')])])]),n("p",[e._v("一个模板例子")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("import React from 'react';\nimport { render } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  const { getByText } = render(<App />);\n  const linkElement = getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n")])])]),n("h3",{attrs:{id:"测试框架选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试框架选择"}},[e._v("#")]),e._v(" 测试框架选择")]),e._v(" "),n("p",[e._v("我的观点里面就是当希望对于测试有太多的配置需求比如mock数据还有一些关于组件内部代码的测试那就用 jest + enzyme 如果是 满足业务流程比如页面展示变化就使用ReactTesting  Library。为什么呢？")]),e._v(" "),n("p",[e._v("而一个稳定可靠的测试用例应该脱离组件内部的实现细节, 越接近用户行为的测试用例能给开发者带来越充足的自信。相较于 enzyme, react-testing-library 所提供的 api 更加贴近用户的使用行为。")]),e._v(" "),n("p",[e._v("比如下面列子")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("class Carousel extends React.Component {\n  state = {\n    index: 0\n  }\n\n  /* 跳转到指定的页数 */\n  jump = (to: number) => {\n    this.setState({\n      index: to\n    })\n  }\n\n  render() {\n    const { index } = this.state\n    return <>\n      <Swipe currentPage={index} />\n      <button onClick={() => this.jump(index + 1)}>下一页</button>\n      <span>`当前位于第${index}页`</span>\n    </>\n  }\n}\n")])])]),n("p",[e._v("如果把index 改为 currentPage")]),e._v(" "),n("p",[e._v("enzyme 需要修改")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("describe('Carousel Test', () => {\n  it('test jump', () => {\n    ...\n\n-   expect(wrapper.state('index')).toBe(0)\n+   expect(wrapper.state('currentPage')).toBe(0)\n    wrapper.instance().jump(2)\n-   expect((wrapper.state('index')).toBe(2)\n+   expect((wrapper.state('currentPage')).toBe(2)\n  })\n})\n")])])]),n("p",[e._v("react-testing-library  不需要修改")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("import { render, fireEvent } from '@testing-library/react'\n\ndescribe('Carousel Test', () => {\n  it('test jump', () => {\n    const { getByText } = render(<Carousel>\n      <div>第一页</div>\n      <div>第二页</div>\n      <div>第三页</div>\n    </Carousel>)\n\n    expect(getByText(/当前位于第一页/)).toBeInTheDocument()\n    fireEvent.click(getByText(/下一页/))\n    expect(getByText(/当前位于第一页/)).not.toBeInTheDocument()\n    expect(getByText(/当前位于第二页/)).toBeInTheDocument()\n  })\n})\n")])])]),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("其实对于总体来说 enzyme也可以实现react-testing-library  但是免不了会有其他粒度操作而react-testing-library  就特别简单了。仁者见仁看你的需求了。")])])}),[],!1,null,null,null);t.default=r.exports}}]);